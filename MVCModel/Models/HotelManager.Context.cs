//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MVCModel.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class HotelManagerEntities : DbContext
    {
        public HotelManagerEntities()
            : base("name=HotelManagerEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<BillingDetail> BillingDetails { get; set; }
        public virtual DbSet<BillingMaster> BillingMasters { get; set; }
        public virtual DbSet<BookingMaster> BookingMasters { get; set; }
        public virtual DbSet<ListChargeRate> ListChargeRates { get; set; }
        public virtual DbSet<ListChargeType> ListChargeTypes { get; set; }
        public virtual DbSet<ListContextMenu> ListContextMenus { get; set; }
        public virtual DbSet<ListHotel> ListHotels { get; set; }
        public virtual DbSet<ListLocation> ListLocations { get; set; }
        public virtual DbSet<ListRoom> ListRooms { get; set; }
        public virtual DbSet<ListRoomStatuses> ListRoomStatuses { get; set; }
        public virtual DbSet<ListRoomType> ListRoomTypes { get; set; }
        public virtual DbSet<ListService> ListServices { get; set; }
        public virtual DbSet<PurchaseInvoiceDetail> PurchaseInvoiceDetails { get; set; }
        public virtual DbSet<PurchaseInvoice> PurchaseInvoices { get; set; }
        public virtual DbSet<AspNetUserHotel> AspNetUserHotels { get; set; }
        public virtual DbSet<ListRoomCategory> ListRoomCategories { get; set; }
    
        public virtual ObjectResult<Nullable<int>> GetActiveBill(Nullable<int> roomID)
        {
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetActiveBill", roomIDParameter);
        }
    
        public virtual ObjectResult<BillingDetailFull> GetBillingDetailFull(Nullable<int> billingID)
        {
            var billingIDParameter = billingID.HasValue ?
                new ObjectParameter("BillingID", billingID) :
                new ObjectParameter("BillingID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BillingDetailFull>("GetBillingDetailFull", billingIDParameter);
        }
    
        public virtual ObjectResult<BillingList> GetBillingList(string userId, Nullable<int> hotelID)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var hotelIDParameter = hotelID.HasValue ?
                new ObjectParameter("HotelID", hotelID) :
                new ObjectParameter("HotelID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BillingList>("GetBillingList", userIdParameter, hotelIDParameter);
        }
    
        public virtual ObjectResult<VolumnChargeRate> GetChargeRate(Nullable<int> roomTypeID, Nullable<int> chargeTypeID, Nullable<int> chargeVolumn)
        {
            var roomTypeIDParameter = roomTypeID.HasValue ?
                new ObjectParameter("RoomTypeID", roomTypeID) :
                new ObjectParameter("RoomTypeID", typeof(int));
    
            var chargeTypeIDParameter = chargeTypeID.HasValue ?
                new ObjectParameter("ChargeTypeID", chargeTypeID) :
                new ObjectParameter("ChargeTypeID", typeof(int));
    
            var chargeVolumnParameter = chargeVolumn.HasValue ?
                new ObjectParameter("ChargeVolumn", chargeVolumn) :
                new ObjectParameter("ChargeVolumn", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VolumnChargeRate>("GetChargeRate", roomTypeIDParameter, chargeTypeIDParameter, chargeVolumnParameter);
        }
    
        public virtual ObjectResult<HotelFloorLevel> GetHotelFloorLevel(string userId, Nullable<int> hotelID)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var hotelIDParameter = hotelID.HasValue ?
                new ObjectParameter("HotelID", hotelID) :
                new ObjectParameter("HotelID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<HotelFloorLevel>("GetHotelFloorLevel", userIdParameter, hotelIDParameter);
        }
    
        public virtual ObjectResult<HotelRoom> GetHotelRoom(string userId, Nullable<int> hotelID)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var hotelIDParameter = hotelID.HasValue ?
                new ObjectParameter("HotelID", hotelID) :
                new ObjectParameter("HotelID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<HotelRoom>("GetHotelRoom", userIdParameter, hotelIDParameter);
        }
    
        public virtual int SetBillingRoom(Nullable<int> billingID, Nullable<int> roomID, Nullable<int> newRoomID, string description)
        {
            var billingIDParameter = billingID.HasValue ?
                new ObjectParameter("BillingID", billingID) :
                new ObjectParameter("BillingID", typeof(int));
    
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var newRoomIDParameter = newRoomID.HasValue ?
                new ObjectParameter("NewRoomID", newRoomID) :
                new ObjectParameter("NewRoomID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetBillingRoom", billingIDParameter, roomIDParameter, newRoomIDParameter, descriptionParameter);
        }
    
        public virtual int SetRoomStatus(Nullable<int> roomID, Nullable<int> roomStatusID)
        {
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var roomStatusIDParameter = roomStatusID.HasValue ?
                new ObjectParameter("RoomStatusID", roomStatusID) :
                new ObjectParameter("RoomStatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetRoomStatus", roomIDParameter, roomStatusIDParameter);
        }
    
        public virtual int UpdateWarehouseBalance(Nullable<int> updateWarehouseBalanceOption, Nullable<int> purchaseInvoiceID, Nullable<int> billingID)
        {
            var updateWarehouseBalanceOptionParameter = updateWarehouseBalanceOption.HasValue ?
                new ObjectParameter("UpdateWarehouseBalanceOption", updateWarehouseBalanceOption) :
                new ObjectParameter("UpdateWarehouseBalanceOption", typeof(int));
    
            var purchaseInvoiceIDParameter = purchaseInvoiceID.HasValue ?
                new ObjectParameter("PurchaseInvoiceID", purchaseInvoiceID) :
                new ObjectParameter("PurchaseInvoiceID", typeof(int));
    
            var billingIDParameter = billingID.HasValue ?
                new ObjectParameter("BillingID", billingID) :
                new ObjectParameter("BillingID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateWarehouseBalance", updateWarehouseBalanceOptionParameter, purchaseInvoiceIDParameter, billingIDParameter);
        }
    
        [DbFunction("HotelManagerEntities", "GetOverStockItems")]
        public virtual IQueryable<OverStockItem> GetOverStockItems(Nullable<System.DateTime> actionDate, Nullable<int> purchaseInvoiceID, Nullable<int> billingID)
        {
            var actionDateParameter = actionDate.HasValue ?
                new ObjectParameter("ActionDate", actionDate) :
                new ObjectParameter("ActionDate", typeof(System.DateTime));
    
            var purchaseInvoiceIDParameter = purchaseInvoiceID.HasValue ?
                new ObjectParameter("PurchaseInvoiceID", purchaseInvoiceID) :
                new ObjectParameter("PurchaseInvoiceID", typeof(int));
    
            var billingIDParameter = billingID.HasValue ?
                new ObjectParameter("BillingID", billingID) :
                new ObjectParameter("BillingID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<OverStockItem>("[HotelManagerEntities].[GetOverStockItems](@ActionDate, @PurchaseInvoiceID, @BillingID)", actionDateParameter, purchaseInvoiceIDParameter, billingIDParameter);
        }
    
        public virtual ObjectResult<ActiveRoom> GetActiveRoom(Nullable<int> hotelID, Nullable<int> roomCategoryID, Nullable<int> roomID)
        {
            var hotelIDParameter = hotelID.HasValue ?
                new ObjectParameter("HotelID", hotelID) :
                new ObjectParameter("HotelID", typeof(int));
    
            var roomCategoryIDParameter = roomCategoryID.HasValue ?
                new ObjectParameter("RoomCategoryID", roomCategoryID) :
                new ObjectParameter("RoomCategoryID", typeof(int));
    
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ActiveRoom>("GetActiveRoom", hotelIDParameter, roomCategoryIDParameter, roomIDParameter);
        }
    
        public virtual int DeleteBilling(Nullable<System.DateTime> deleteDate)
        {
            var deleteDateParameter = deleteDate.HasValue ?
                new ObjectParameter("DeleteDate", deleteDate) :
                new ObjectParameter("DeleteDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteBilling", deleteDateParameter);
        }
    }
}
